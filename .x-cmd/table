# shellcheck shell=sh disable=SC2154,SC2164,2046,2106,3043 #source
generate_mdtable(){
    printf "%s\n" "| candidate \\ osarch | linux/x64 | linux/arm64 | darwin/x64 | darwin/arm64 | win/x64 |"
    printf "%s\n" "| ------------------ | ----------- | ------------ | ---------- | --------- | ------- |"

    local dir ; local pkg ; local version ; local osarch ; local url ; local http_code ; local time_total ; local category;
    for dir in "$(x wsroot)"/src/*; do
        category="${dir##*/}"

        [ -d "$dir" ] || continue
        for pkg in "$dir"/*; do
            pkg="${pkg##*/}"
            x:info "$category/$pkg" >&2
            version="$(___x_cmd_pkg_default_version "$pkg")"
            printf "|%s/%s " "$category" "$pkg"

            for osarch in linux/x64 linux/arm64 darwin/x64 darwin/arm64 win/x64; do
                url="$(___x_cmd_pkg___list "$pkg" "$version" "$osarch" "url.$network"  2>/dev/null)"
                [ -n "$url" ] || { printf "| %s " "-"; count_num "$category" unsupport; continue;}
                eval "$(curl -sSI --max-time 10 -o /dev/null -w "http_code=%{http_code} ; time_total=%{time_total}" "$url")"
                time_total=$(awk 'BEGIN{printf("%d\n",'"$time_total"'*1000)}')

                case $http_code in
                    200|302|304)    printf "| %s(%sms) " "✅" "$time_total"; count_num "$category" pass ;;
                    000)            printf "| ❌(timeout)"
                                    count_num "$category" error
                                    x:error "url: $url, http_code: timeout";;
                    *)               printf "| %s(%s)" "❌" "${http_code:-"timeout"}"
                                    count_num "$category" error
                                    x:error "url: $url, http_code: $http_code";;
                esac
            done

            printf "|\n"
        done
        x:info "$(generate_result_one "$category")"
    done
}

count_num(){
    local category="$1"
    local stat="$2"
    local num=""; num="$(x sdict get pkg_url_test "$category/$stat")"
    [ -n "$num" ] || num=0
    x sdict put pkg_url_test "$category/$stat" "$((num+1))"
}

generate_result(){
    printf "\n\n"
    local dir ; local category;
    for dir in "$(x wsroot)"/src/*; do
        category="${dir##*/}"
        generate_result_one "$category"
    done
}

generate_result_one(){
    local pass ; local unsupport ; local error
    local category="$1"
    pass="$(x sdict get pkg_url_test "$category/pass")"
    unsupport="$(x sdict get pkg_url_test "$category/unsupport")"
    error="$(x sdict get pkg_url_test "$category/error")"
    printf "%s: total=%s pass=%s unsupport=%s error=%s  \n" \
        "$category" "$((${pass:-0}+${unsupport:-0}+${error:-0}))" "${pass:-0}" "${unsupport:-0}" "${error:-0}"
}

generate_sammury(){
    local total ; local total_pass; local _total_pass; local total_error; local _total_error; local _total_unsuport; local success_rate
    for dir in "$(x wsroot)"/src/*; do
        category="${dir##*/}"
        for _stat in pass unsupport error;do
            if [ "$_stat" = "pass" ]; then
                _pass_total=$(x sdict get pkg_url_test "$category/pass")
                total_pass="$(awk -v total_pass=$total_pass -v _pass_total=$_pass_total 'BEGIN{ total_amount = total_pass + _pass_total; printf("%s", total_amount)}')"
            fi
            if [ "$_stat" = "error" ]; then
                _tota_error=$(x sdict get pkg_url_test "$category/error")
                total_error="$(awk -v total_error=$total_error -v _tota_error=$_tota_error 'BEGIN{ total_amount = total_error + _tota_error; printf("%s", total_amount)}')"
            fi
            if [ "$_stat" = "unsupport" ]; then
                _total_unsupport=$(x sdict get pkg_url_test "$category/unsupport")
                total_unsuport="$(awk -v total_unsuport=$total_unsuport -v _total_unsupport=$_total_unsupport 'BEGIN{ total_amount = total_unsuport + _total_unsupport; printf("%s", total_amount)}')"
            fi
        done
    done
    total="$(awk  'BEGIN{printf("%d\n",'"$total_unsuport"'+ '"$total_error"'+ '"$total_pass"' )}')"
    success_rate="$( total=$total  unsupport="$total_unsuport" pass="$total_pass" command awk 'BEGIN{ success= ENVIRON[ "unsupport" ] + ENVIRON[ "pass" ]; rate = success / ENVIRON["total"]; printf("%d", rate*100) }')"
    printf "total:%s  total pass :%s  total unsupport:%s  total error:%s  success rate:%s%% "  "$total" "$total_pass" "$total_unsuport" "$total_error" "$success_rate"
}

if [ "$#" -eq 0 ] ; then
    set -- "cn"
fi

local network="$1"
local result_path; result_path="$(x wsroot)/doc/default_url/$network.md"
x touch "$result_path"

x:info "Generate: markdown table for $network network"
(
    generate_mdtable "$network" >"$result_path"
    generate_result  >>"$result_path"
    generate_sammury >>"$result_path"
)
