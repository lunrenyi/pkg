# shellcheck shell=sh disable=SC2154,SC2164,2046,2106,3043 #source
generate_mdtable(){
    printf "%s\n" "| candidate \\ osarch | linux/x64 | linux/arm64 | darwin/x64 | darwin/arm64 | win/x64 |"
    printf "%s\n" "| ------------------ | ----------- | ------------ | ---------- | --------- | ------- |"

    local dir ; local pkg ; local version ;  local category;
    for dir in "$(x wsroot)"/src/*; do
        category="${dir##*/}"

        [ -d "$dir" ] || continue
        for pkg in "$dir"/*; do
            pkg="${pkg##*/}"
            x:info "$category/$pkg"
            version="$(___x_cmd_pkg_default_version "$pkg")"
            generate_mdtable_online "$category" "$pkg" "$version" "$network"
        done
    done
}

generate_mdtable_online(){
    local category="$1"; local pkg="$2"; local version="$3"; local network="$4"

    printf "|%s/%s " "$category" "$pkg"
    local url ; local http_code ; local time_total ; local osarch
    for osarch in linux/x64 linux/arm64 darwin/x64 darwin/arm64 win/x64; do
        if ! url="$(___x_cmd_pkg___list "$pkg" "$version" "$osarch" "url.$network"  2>/dev/null)" || [ -z "$url" ]; then
            printf "| %s " "-"
            continue
        fi

        eval "$(curl -sSI --max-time 10 -o /dev/null -w "http_code=%{http_code} ; time_total=%{time_total}" "$url")"
        time_total=$(awk 'BEGIN{printf("%d\n",'"$time_total"'*1000)}')

        case $http_code in
            200|302|304)    printf "| %s(%sms) " "✅" "$time_total"                 ;;
            000)            printf "| ❌(timeout)"
                            x:error "url: $url, http_code: timeout"                 ;;
            *)              printf "| %s(%s)" "❌" "${http_code:-"timeout"}"
                            x:error "url: $url, http_code: $http_code"              ;;
        esac
    done
    printf "|\n"
}

local network="${1:-"cn"}"
local osarch; osarch="$(x os name)$(x os arch)"
local result_path; result_path="$(x wsroot)/doc/default_url/$osarch.$network.md"
x touch "$result_path"

x:info "Generate => markdown table for $network network, osarch => $osarch"
(
    generate_mdtable "$network" >"$result_path"
)
