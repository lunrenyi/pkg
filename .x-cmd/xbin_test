# shellcheck shell=sh disable=SC2154,SC2164,2046,2106,3043,2091 #source
generate_xbin_test_mdtable(){
    printf "%s\n" "| candidate \\ osarch | $1 | $2 |$3 | "
    printf "%s\n" "| ------------------ | ----------- | ------------ | ---------- | "

    local dir ; local pkg ; local version ; local osarch ; local url ; local http_code ; local time_total ; local category;
    for dir in "$(x wsroot)"/src/*; do
        category="${dir##*/}"
        case $category in
            lang | plugin) continue;;
        esac
        [ -d "$dir" ] || continue
        for pkg in "$dir"/*; do

            pkg="${pkg##*/}"
            x:info "$category/$pkg" >&2
            version="$(___x_cmd_pkg_default_version "$pkg")"
            printf "|%s/%s " "$category" "$pkg"

            for osarch in "$@"; do
                # case $pkg in
                #     nping|nmap|ncat|bandwhich|smartctl) continue;;
                # esac
                echo "$pkg" "$version" "$osarch" "url.$network" >&2
                url="$(___x_cmd_pkg___list "$pkg" "$version" "$osarch" "url.$network"  2>/dev/null)"
                [ -n "$url" ] || { printf "| %s " "-"; count_num "$category" unsupport; continue;}
                eval "$(curl -sSI --max-time 10 -o /dev/null -w "http_code=%{http_code} ; time_total=%{time_total}" "$url")"
                case $http_code in
                    200|302|304)    test_xbin "$pkg" "$version" "$osarch" "$url";;
                    000)            printf "| ❌(timeout)"
                                    count_num "$category" error
                                    x:error "url: $url, http_code: timeout";;
                    *)              printf "| %s(%s)" "❌" "${http_code:-"timeout"}"
                                    count_num "$category" error
                                    x:error "url: $url, http_code: $http_code";;
                esac
                x pkg uninstall "$pkg"
            done
            printf "|\n"
        done
        x:info "$(generate_result_one "$category")"
    done
}

test_xbin(){
    local name="$1" ; local version="$2" ; local osarch="$3" ; local url="$4" ; local os; local arch ; local bin_path; local size
    arch=${osarch#*/} ; os=${osarch%/*}
    ___X_CMD_OS_NAME_=$os; ___X_CMD_OS_ARCH_=$arch;

    {
        if x pkg install "$name"; then
            bin_path=$(x pkg xbin path $name)
            if [ -f "$bin_path" ]; then
                size=$(ls -lh $bin_path | awk '{printf("%s", $5)}')
                printf "| %s(%s) " "✅" "$size"; count_num "$category" pass
                return
            else
                printf "| %s(%s)" "❌" "Not found path"
                x:error "pkg: $name, os/arch: $osarch  Not found path"
                count_num "$category" error
                return
            fi
        else
            printf "| %s(%s)" "❌" "File corrupted."
            count_num "$category" error
            return
        fi
    }
}

generate_result(){
    printf "\n\n"
    local dir ; local category;
    for dir in "$(x wsroot)"/src/*; do
        category="${dir##*/}"
        generate_result_one "$category"
    done
}

generate_result_one(){
    local pass ; local unsupport ; local error
    local category="$1"
    pass="$(x sdict get pkg_xbin_test "$category/pass")"
    unsupport="$(x sdict get pkg_xbin_test "$category/unsupport")"
    error="$(x sdict get pkg_xbin_test "$category/error")"
    printf "%s: total=%s pass=%s unsupport=%s error=%s  \n" \
        "$category" "$((${pass:-0}+${unsupport:-0}+${error:-0}))" "${pass:-0}" "${unsupport:-0}" "${error:-0}"
}


count_num(){
    local category="$1"
    local stat="$2"
    local num=""; num="$(x sdict get pkg_xbin_test "$category/$stat")"
    [ -n "$num" ] || num=0
    x sdict put pkg_xbin_test "$category/$stat" "$((num+1))"
}

xbin_test_begin(){
    local network
    local title=${2%/*}
    ! [ -z "$2" ] ||  title=${1%/*}
    if [ "$1" = "cn" ] || [ "$1" = "internet" ]; then
        network="$1";  shift
    else
        network="cn"
    fi

    local result_path; result_path="$(x wsroot)/doc/xbin_test_$title/$network.md"
    x touch "$result_path"

    x:info "Generate: markdown table for $network network"
    (
        generate_xbin_test_mdtable "$@" >"$result_path"
        generate_result  >>"$result_path"
    )
}

xbin_test_begin "$@"